# generated by mBlock5 for CyberPi
# codes make you happy

import event, time, cyberpi, mbuild

# Function to clamp the LED value within a min and max
def clamp_value(value, minimum : int = 1, maximum : int = 12):
    if value > maximum:
        value = minimum
    elif value < minimum:
        value = maximum
    return value

# Function to light up LEDs with the colors passed in args
# Parameters:
# colors - List of 12 lists containing RGB values for the colors (List must contain amount of colors that are divisible to 12)
# led_pos - Initial position of LED
# brightness - The value that will subtract the RGB value by (0-255)
# shift - Int representing the direction that the LEDs will light up; clockwise or counter clockwise (1, -1) [If no args passed, set to 1 by default]
# effect_speed - Time between every lighting of LED in seconds
def light_up_led(colors, led_pos : int, brightness : int, shift : int = 1, effect_speed : int = 0.5):
    # Determine the number of repetitions needed to cover all LEDs
    repetitions = 12 // len(colors)
    
    # Repeats to complete the full circle
    for _ in range(repetitions):
        # Iterates over every color in the list, color is set to the color list item
        for color in colors:
            # Changes the starting position by shift, and clamps it between 1 and 12
            led_pos += shift
            led_pos = clamp_value(led_pos)
            
            # Turns on LEDS
            mbuild.led_strip.set_single(led_pos, color[0]-brightness, color[1]-brightness, color[2]-brightness, 1)
            #time.sleep(effect_speed)

def rainbow_shift(direction):
    # Defines List of Lists containing RGB values of ROYGBV
    # Defines ROYGBV
    color_list = [[255, 0, 0], [255, 140, 0], [255, 255, 0], [0, 255, 0], [0, 0, 255], [255, 0, 255]]
    
    led_position = 0
    
    while True:
        if cyberpi.controller.is_press('a'):
            mbuild.led_strip.set_all(0, 0, 0, 1)
            break
        mbuild.led_strip.set_all(0, 0, 0, 1)
        led_position += direction
        led_position = clamp_value(led_position)

        light_up_led(color_list, led_position, 240, direction)
        time.sleep(0.5)

def color_cycle():
    # Defines List of Lists containing RGB values of ROYGBV
    # Defines ROYGBV
    color_list = [[[255, 0, 0]], [[255, 140, 0]], [[255, 255, 0]], [[0, 255, 0]], [[0, 0, 255]], [[255, 0, 255]]]

    color_index = -1
    while True:
        if cyberpi.controller.is_press('a'):
            mbuild.led_strip.set_all(0, 0, 0, 1)
            break_out = True
            break
        color_index += 1
        color_index = clamp_value(color_index, 0, (len(color_list)-1))
        light_up_led(color_list[color_index], 1, 0, 1)
        time.sleep(0.5)

def color_shift():
    # Define the initial color values
    color_list = [[255,0,0]]

    # Loop to cycle through colors
    while True:
        # Increment green from 0 to 255 (Red to Yellow)
        while color_list[0][1] < 255:
            color_list[0][1] += 1
            print(color_list)
            time.sleep(0.01)
        
        # Increment blue from 0 to 255 (Yellow to Green)
        while color_list[0][2] < 255:
            color_list[0][2] += 1
            print(color_list)
            time.sleep(0.01)
        
        # Decrement red from 255 to 0 (Green to Cyan)
        while color_list[0][0] > 0:
            color_list[0][0] -= 1
            print(color_list)
            time.sleep(0.01)
        
        # Increment green from 255 to 0 (Cyan to Blue)
        while color_list[0][1] > 0:
            color_list[0][1] -= 1
            print(color_list)
            time.sleep(0.01)
        
        # Increment blue from 255 to 0 (Blue to Magenta)
        while color_list[0][2] > 0:
            color_list[0][2] -= 1
            print(color_list)
            time.sleep(0.01)
        
        # Increment red from 0 to 255 (Magenta to Red)
        while color_list[0][0] < 255:
            color_list[0][0] += 1
            print(color_list)
            time.sleep(0.01)

cyberpi.console.print('lol')
break_out = False
color_cycle()